[comment encoding = UTF-8 /]
[module uml2python('http://www.eclipse.org/uml2/4.0.0/UML')]


[template public generate(m : Package)]
[comment @main/]
[file (m.name.concat('.py'), false, 'UTF-8')]
[if (not m.ownedComment->isEmpty())]
"""
[m.ownedComment.genComment(' ')/]
"""[/if]

[for (e : Enumeration | m.ownedElement->filter(Enumeration))]
[e.genClassif()/]
[/for]

[let nonInherit : Set(Classifier) = 
	m.ownedElement->
		filter(Classifier)->
			select(
				ownedMember->forAll(not oclIsKindOf(Generalization) and not oclIsKindOf(InterfaceRealization)))]
[for (e : Classifier | nonInherit->reject(oclIsKindOf(Enumeration)))]
[e.genClassif()/]
[/for]
[for (e : Classifier | m.ownedElement->filter(Classifier)->select(c | nonInherit->excludes(c))->reject(oclIsKindOf(Enumeration)))]
[e.genClassif()/]
[/for]
[/let]

# [protected ('-> functions/methods for ' + m.name + ' package')]

# [/protected]
[/file]
[/template]

[template public genClassif(e : Classifier)/]
[template public genClassif(c : Class)]
[let inherited : Bag(Classifier) = c.superClass->union(c.interfaceRealization.contract)]
class [c.name/]([if (not inherited->isEmpty())][for (cl : Classifier | inherited) separator(', ')][cl.name/][/for][else]object[/if]):
[c.ownedMember->sep('\n')/]
	[if (not c.ownedComment->isEmpty())]
	"""
	[c.ownedComment.genComment(' ')/]
	"""
	[/if]
	[if (not c.ownedAttribute->isEmpty())]
	def __init__(self):
		[c.ownedAttribute.gen()/]
	[else]
	pass
	[/if]
	# [protected ('-> properties/constructors for ' + c.name + ' class')]

	# [/protected]
	[if (not c.nestedClassifier->isEmpty())]
	[c.nestedClassifier.genClassif()/]
	[/if]
	[if (not c.ownedOperation->isEmpty())]
		[for (ops : Operation | c.ownedOperation)]
	[ops.gen()/]
		[/for]
	[/if]
	# [protected ('-> methods for ' + c.name + ' class')]

	# [/protected]
[/let]

[/template]

[template public genClassif(i : Interface)]
[let inherited : Bag(Classifier) = i.generalization.general]
class [i.name/]([if (not inherited->isEmpty())][for (cl : Classifier | inherited) separator(', ')][cl.name/][/for][else]object[/if]):
	[i.ownedMember->sep('\n')/]
	[if (not i.ownedComment->isEmpty())]
	"""
	[i.ownedComment.genComment(' ')/]
	"""
	[/if]
	[if (not i.ownedAttribute->isEmpty())]
	def __init__(self):
		[i.ownedAttribute.gen()/]
	[else]
	pass
	[/if]
	# [protected ('-> properties/constructors for ' + i.name + ' class(interface)')]

	# [/protected]
	[if (not i.nestedClassifier->isEmpty())]
	[i.nestedClassifier.genClassif()/]
	[/if]
	[if (not i.ownedOperation->isEmpty())]
		[for (ops : Operation | i.ownedOperation)]
	[ops.gen()/]
		[/for]
	[/if]
	# [protected ('-> methods for ' + i.name + ' class(interface)')]

	# [/protected]
[/let]

[/template]

[template public genClassif(e : Enumeration)]
class [e.name/]:
	[if (not e.ownedComment->isEmpty())]
	"""
	[e.ownedComment.genComment(' ')/]
	"""
	[/if]
	[if (not e.ownedLiteral->isEmpty())]
	[for (lit : EnumerationLiteral | e.ownedLiteral) separator(', ')][lit.name/][/for] = range([e.ownedLiteral->size()/])
	[/if]
[/template]

[template public gen(p : Property)]
[if (not p.ownedComment->isEmpty())]
[p.ownedComment.genComment('#')/]
[/if]
self.[if (p.visibility = VisibilityKind::_private)]__[/if][p.name/] = [p.genValue()/]

[/template]

[template public gen(o : Operation)]
[o.header()/]
	[if (not o.ownedComment->isEmpty())]
	"""
	[o.ownedComment.genComment(' ')/]
	"""
	[/if]
	[o.bodyOperation()/]	
[/template]

[template public header(o : Operation)]
def [if (o.visibility = VisibilityKind::_private)]__[/if][o.name/](self[for (param : Parameter | o.ownedParameter->excluding(o.getReturnResult())) before (', ') separator(', ')][param.name/][/for]):
[/template]


[template public bodyOperation(o : Operation)]
# [protected ('protected zone for ' + o.name + ' function body')]
[if (o.getReturnResult() <> null and o.getReturnResult().type <> null)]
return [o.getReturnResult().genValue()/]
[else]raise NotImplementedError
[/if]
# [/protected]
[/template]

[template public genValue(m : MultiplicityElement) post (trim())]
[if (m.isMany())]['['/]]
[elseif (m.oclIsKindOf(TypedElement))][m.oclAsType(TypedElement).type.genSingleValue()/]
[else]None
[/if]
[/template]


[template public genSingleValue(t : Type) ? (not t.oclIsUndefined()) post (trim())]
[if (t.name = 'String')]""
[elseif (t.name = 'UnlimitedNatural')]0L
[elseif (t.name = 'Double')]0.
[elseif (t.name = 'Real')]0.
[elseif (t.name = 'Float')]0.
[elseif (t.name = 'Long')]0L
[elseif (t.name = 'Integer')]0
[elseif (t.name = 'Short')]0
[elseif (t.name = 'Byte')]0x0
[elseif (t.name = 'ByteArray')]['['/]]
[elseif (t.name = 'Boolean')]False
[elseif (t.name = 'Date')]datetime()
[elseif (t.name = 'Char')]''
[elseif (t.oclIsKindOf(Enumeration))][if (not t.oclAsType(Enumeration).ownedLiteral->isEmpty())][t.name/].[t.oclAsType(Enumeration).ownedLiteral->at(1).name/][else]None[/if]
[elseif (t.oclIsKindOf(Classifier))]None
[else]None[/if]
[/template]

[template public genComment(c : Comment, prefix : String)]
[prefix/][c.genBody(prefix).replaceAll('\n','\n' + prefix + ' ')/]

[/template]

[template public genBody(c : Comment, prefix : String)]
[c._body/][if (not c.ownedComment->isEmpty())]['\n'/][prefix/] [c.ownedComment.genBody(prefix)->sep('\n ' + prefix)/][/if]
[/template]

[query public isMany(s : MultiplicityElement) : Boolean =
	s.lower > 1 or s.upper = -1 or s.upper > 1 
/]

[query public isAssociation(p : Property) : Boolean =
	not p.association.oclIsUndefined()
/]
