[comment encoding = UTF-8 /]
[module uml2python('http://www.eclipse.org/uml2/4.0.0/UML')]


[template public generate(m : Package)]
[comment @main/]
[file (m.name.concat('.py'), false, 'UTF-8')]
[if (not m.ownedComment->isEmpty())]
"""
[m.ownedComment.genComment(' ')/]
"""[/if]

[for (e : Element | m.ownedElement->select(oclIsKindOf(Class) and oclAsType(Class).superClass->isEmpty()))]
[e.gen()/]
[/for]

# [protected ('-> functions/methods for ' + m.name + ' package')]

# [/protected]
[/file]
[/template]

[template public gen(e : Element)/]
[template public gen(c : Class)]
class [c.name/]([if (not c.superClass->isEmpty())][for (c : Classifier | self.superClass) separator(', ')][c.name/][/for][else]object[/if]):
	[if (not c.ownedComment->isEmpty())]
	"""
	[c.ownedComment.genComment(' ')/]
	"""
	[/if]
	[if (not c.ownedAttribute->isEmpty())]
	def __init__(self):
		[c.ownedAttribute.gen()/]
	[else]
	pass
	[/if]
	# [protected ('-> properties/constructors for ' + c.name + ' class')]

	# [/protected]
	[if (not c.nestedClassifier->isEmpty())]
	[c.nestedClassifier.gen()/]
	[/if]
	[comment]
	[if (not c.ownedOperation->isEmpty())]
		[for (ops : Operation | c.ownedOperation)]
	[ops.gen()/]
		[/for]
	[/if]
	[/comment]
	# [protected ('-> methods for ' + c.name + ' class')]

	# [/protected]

[/template]


[template public genComment(c : Comment, prefix : String)]
[prefix/][c.genBody(prefix).replaceAll('\n','\n' + prefix + ' ')/]

[/template]

[template public genBody(c : Comment, prefix : String)]
[c._body/][if (not c.ownedComment->isEmpty())]['\n'/][prefix/] [c.ownedComment.genBody(prefix)->sep('\n ' + prefix)/][/if]
[/template]